vec <- rlnorm(5*nosim,1)
mat <- matrix(data,nrow=nosim,ncol=5)
mat <- matrix(vec,nrow=nosim,ncol=5)
mean(mat)
nosim <- 10000
mat <- matrix(vec,nrow=nosim,ncol=5)
mean(mat)
vec <- rlnorm(5*nosim,1)
mat <- matrix(vec,nrow=nosim,ncol=5)
mean(mat)
?rlnorm
vec <- rlnorm(nosim,5,1)
mean(vec)
vec <- rlnorm(nosim,5,1)
mean(vec)
exp(5)
exp(5.5)
vec <- rlnorm(nosim,5,1)
mean(vec)
nosim <- 1000000
vec <- rlnorm(nosim,5,1)
mean(vec)
exp(mean(log(vec)))
dbeta(0.5,10,10)
dbeta(0.4,10,10)
dbeta(0.6,10,10)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(Galton)
par(mfrow=c(1,2))
hist(Galton)
hist(Galton$child,col="blue",breaks=100)
hist(Galton$parent,col="blue",breaks=100)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=2)
mse <- mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))}
manipulate(myHist(mu),mu=slider(62,74,step=.5))
par(mfrow=c(1,1))
manipulate(myHist(mu),mu=slider(62,74,step=.5))
plot(galton$parent,galton$child,pch=19,col="blue")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","paretn","freq")
plot(
as.numeric(as.vector(freqData$parent))
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta,beta=slider(0.8,1.2,step=.02)))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent))
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta,beta=slider(0.8,1.2,step=.02)))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta,beta=slider(0.8,1.2,step=.02)))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.8,1.2,step=.02)))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.8,1.2,step=.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child","parent","freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch=21,col="black",bg="lightblue",
cex=.15*freqData$freq,
xlab="parent",
ylab="child"
)
abline(0,beta,lwd=3)
points(0,0,cex=2,pch=19)
mse <- mean((y-beta*x)^2)
title(paste("beta=",beta,"mse =",round(mse,3)))
}
manipulate(myPlot(beta),beta=slider(0.6,1.2,step=.02))
x <- c(0.18,0.18,-1.54,0.42,0.42,0.42,0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y -1 )
lm(y~x -1 )
data(mtcars)
fit <- lm(mpg~weight,data=mtcars)
head(mtcars)
fit <- lm(mpg~wt,data=mtcars)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
x
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
fit <- lm(y~x)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModelling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
diagnosis
predictors
head(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
data(concrete)
set.seed(975)
inTrain <- createDataPartition(mixtures$CompressiveStrenght,p=0.75)[[1]]
inTrain <- createDataPartition(mixtures$CompressiveStrength,p=0.75)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
install.packages("Hmisc")
install.packages("Hmisc")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.8,list=FALSE)
training <- segmentationOriginal[inTrain]
fit <- train(training$case ~ .,data=training,method="rpart")
fit <- train(training$Case ~ .,data=training,method="rpart")
fit <- train(Case ~ .,data=training,method="rpart")
fit <- train(Case ~ .,data=training,method="lda")
fit <- train(Case ~ .,method="lda")
fit <- train(Case ~ .,method="lda",data=training)
train
training <- segmentationOriginal[inTrain,]
fit <- train(Case ~ .,method="lda",data=training)
fit <- train(Case ~ .,method="rpart",data=training)
test <- segmentationOriginal[-inTrain,]
View(test)
test$TotalIntenCh1==23000
test$TotalIntenCh1==23.000
test$TotalIntenCh2==23.000
test$TotalIntenCh2==23000
test$FiberWidthCh1==10
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=.6, list=FALSE
)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
fit <- train(Case ~ . ,data=training,method="rpart")
test$TotalIntenCh2
test$TotalIntenCh2==23000
sum(test$TotalIntenCh2==23000)
install.packages("rattle)
sdf
asdf
aes
32r
12
34
)
""
))
install.packages("rattle")
library(rattle)
fancyRpartPlot(fit$finalModel,use.n=TRUE,cex=.8)
fancyRpartPlot(fit$finalModel)
fancyRpartPlot(fit$finalModel)
plot(fit$finalModel)
fit$finalModel
$
plot(fit$finalModel,uniform=TRUE,main="Class Tree")
text(fit$finalModel,use.n=TRUE,cex=.8)
fit <- train(Case ~ . ,data=training,method="rpart")
plot(fit$finalModel,uniform=TRUE,main="Class Tree")
text(fit$finalModel,use.n=TRUE,cex=.8)
predict(fit,testing)
training$Case
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
View(training)
fit <- train(Class ~ .,data=training,method="rpart")
testing$Total2==23000
testing$TotalIntenCh2==23000
sum(testing$TotalIntenCh2==23000)
plot(fit$finalModel,uniform=TRUE,main="Class Tree")
text(fit$finalModel,use.n=TRUE,cex=.8)
install.packages("pgmm")
library(pgmm)
data(olive)
olive <- olive[,-1]
View(olive)
fit <- (Area ~ ., data=olive, method="rpart")
fit <- train(Area ~ ., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
plot(fit$finalModel,uniform=TRUE,main="Class Tree")
text(fit$finalModel,use.n=TRUE,cex=.8)
predict(fit,newdata)
fit <- train(Area ~ ., data=olive, method="rpart")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(ch ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(ch ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="lda")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="lda")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="lda")
ldafit <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="lda")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
ldafit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="glm")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="glm")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
ldafit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$ch,predict(ldafit,trainSA))
missClass(testSA$ch,predict(ldafit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel.test)
View(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train;
testing <- vowel.test;
trainin$y <- factor(training$y);
testing$y <- factor(testgin$y);
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train;
testing <- vowel.test;
training$y <- factor(training$y);
testing$y <- factor(testgin$y);
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train;
testing <- vowel.test;
training$y <- factor(training$y);
testing$y <- factor(testing$y);
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train;
testing <- vowel.test;
training$y <- factor(training$y);
testing$y <- factor(testing$y);
set.seed(33833)
fitrf <- train(y ~ ., data=training, method="rf")
varlmp(fitrf)
varImp(fitrf)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train;
testing <- vowel.test;
training$y <- factor(training$y);
testing$y <- factor(testing$y);
set.seed(33833)
fitrf <- train(y ~ ., data=training, method="rf")
varImp(fitrf)
library(shiny)
setwd("C:/Users/localusr/Desktop/Stats/09 - DataProdcuts/09ProjectShiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(diamonds)
library(ggplot2)
data(diamonds)
View(diamonds)
View(diamonds)
fit <- lm(price ~ carats, data=diamonds)
fit <- lm(price ~ carat, data=diamonds)
runApp()
predict(fit,200)
predict(fit,as.data.frame(200))
newdata$carat <- 200
newdata <- data.frame
newdata$carat <- 200
newdata <- as.data.frame(200)
colnames(newdata) <- "carat"
predict(fit,newdata)
runApp
runApp()
data(diamonds)
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(diamonds)
library(ISLR)
data(wages)
data(Wage)
View(Wage)
summary(Wage)
fit <- lm(Wage$wage ~ Wage$age + Wage$education + Wage$jobclass + Wage$health)
newdata <- c(30, "HS Grad")
newdata <- c(30, "HS Grad", "Industrial", ">=Very Good")
newdata <- as.data.frame(newdata)
colnames(newdata) <- c("age", "education", "jobclass", "health")
colnames(newdata) <- c("age", "education", "jobclass", "health")
View(newdata)
fit
v <- c(1, 1, 1, 1)
s=c("age","education","jobclass","health")
data.frame()
newdata <- df()
newdata <- data.frame()
newdata$age <- 29
newdata <- data.frame("age"=29,"education"=1)
newdata <- data.frame("age"=29,"education"=1,"jobclass"=1,"health"=1)
predict(fit,newdata)
newdata
fit
fit <- lm(Wage$wage ~ Wage$age)
newdata <- data.frame("age"=30)
predict(fit,newdata)
fit
wage2 <- data.frame("age"=Wage$age,"wage"=Wage$wage)
fit <- lm(wage2$wage ~ wage2$age)
predict(fit,newdata)
lmfit <- lm(wage2$wage~wage2$age)
predict(lmfit,newdata)
lmfit
predict(lm(wage2$wage ~ wage2$age),newdata)
